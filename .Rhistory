}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
?inverse
library(swirl)
swirl()
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0.3,0.7))
sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2<-rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois()
rpois(5,mean=10)
rpois(5,10)
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colMeans(MY_POIS)
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
as.Date("1969-01-01")
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986"
t3<-"October 17, 1986 08:24"
strptime(t3,"%B %d, %Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
sys.time()>t1
Sys.Time()>t1
sys.time()
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(data)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(y=cars$speed,x=cars$dist)
plot(y=cars$speed,x=cars$dist)
plot(y=cars$speed,x=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,mai="My Plot")
plot(cars,sub="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2
)
data(mtcars)
?boxplot
boxplot(mpg~cyl)
boxplot(mpg~cyl,data=mtcars)
hist(mtcars$mpg)
library("swirl")
install_from_swirl("Getting_and_Cleaning_Data")
swirl(0)
mydf<-read.csv(path2.csv,stringsAsFactors=FALSE)
mydf<-read.csv("path2.csv",stringsAsFactors=FALSE)
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim("mydf")
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-x:size)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran, r_version == "3.1.1", country =="US")
?Comparison
filter(cran, r_version <= "3.1.1", country =="IN")
filter(cran, r_version <= "3.0.2", country =="IN")
filter(cran,country=="US"|country=="IN")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,r_version==!is.na)
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2,country,desc(descending),ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bites=mean(size))
summarize(cran,avg_bytes=mean(size))
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
mean(by_package)
summarize(by_package,mean(size))
?n
# Compute four values, in the following order, from
# the grouped data:
#
# 1. count = n()
# 2. unique = n_distinct(ip_id)
# 3. countries = n_distinct(country)
# 4. avg_bytes = mean(size)
#
# A few thing to be careful of:
#
# 1. Separate arguments by commas
# 2. Make sure you have a closing parenthesis
# 3. Check your spelling!
# 4. Store the result in pack_sum (for 'package summary')
#
# You should also take a look at ?n and ?n_distinct, so
# that you really understand what is going on.
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
sumbit()
submit()
pack_sum
quantile(packa_sum$count,probs=0.99)
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum,count>679)
top_count
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted<-arrange(top_counts,count)
top_counts_sorted<-arrange(top_counts,desc(count)
)
view()
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum,count>465)
top_unique<-filter(pack_sum,unique>465)
View(top_counts)
View(top_unique)
arrange(top_unique,desc(unique)
）
arrange(top_unique,desc(unique))
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
student2
students2
gather(male_1,female_1)
gather(students,sex,count,-grade)
gather(student2,sex_class,count,-grade)
gather(students2,sex_class,count,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?seperate
?separate
separate(res,sex_class,sex,class)
separate(res,sex_class,c("sex","class"))
submit()
submit()
submit()
students3
resume()
swirl()
library("swirl")
swirl()
submit()
students3
?gather
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
?mutate
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed,final=passed)
?mutate
mutate(passed,final1=passed)
mutate(passed,final1="passed")
passed<-passed %>% mutate(status="passed")
failed<-failed %>% mutate(status="failed")
bind_rows(passed,failed)
sat
?seperate
?separate
submit()
submit()
submit()
submit()
submit()
View(sat)
View(sat)
?gather
submit()
?select
?gather
submit()
submit()
submit()
submit()
?which
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
gather(students,sex_class)
gather(students,sex_class,count,-grade)
res<-gather(students,sex_class,count,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
students3
submit()
?spread
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
reset()
reset()
q
q()
0
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
?download.file
destfileloc<-"C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 3"
destfileloc<-"C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 3/downloaded.csv"
download.file(url,destfileloc)
read.csv(destfileloc)
downloadedfile<-read.csv(destfileloc)
head(downloadedfile)
library(dplyr)
swril()
library(swril)
library("swril")
library("swirl")
swirl()
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
0
q
quit
quit()
downloadedfile<-read.csv("C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 3/downloaded.csv")
library(dplyr)
dlf2<-tbl_df(downloadedfile)
dlf2
?which
downloadedfile[,11:12]
agricultureLogical<-downloadedfile[,11:12]
head(which(agricultureLogical[,1]==3,agricultureLogical[,2]==6),3)
which(agricultureLogical[,1]==3,agricultureLogical[,2]==6)
head(agricultureLogical,3)
head(agricultureLogical,45)
which(agricultureLogical[,1]==3&agricultureLogical[,2]==6)
library(jpeg)
library("jpeg")
install.package("jpeg")
install.packages("jpeg")
library("jpeg")
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
destfileloc<-"C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 3/picture.jpg"
download.file(url,destfileloc)
pictureloaded<-read.jpeg(destfileloc)
pictureloaded<-read.jpg(destfileloc)
pictureloaded<-readJPEG(destfileloc)
destfileloc<-"C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 3/getdata-jeff.jpg"
pictureloaded<-readJPEG(destfileloc)
pictureloaded
pictureloaded[30]
head(pictureloaded,81)
quantile(pictureloaded,30)
?quantile
quantile(pictureloaded,prbs=c(30,80))
quantile(pictureloaded,probs=c(30,80))
quantile(pictureloaded,prbs=c(30,80))
fileloc1<-"C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 3/getdata-data-GDP.csv"
fileloc2<-"C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 3/getdata-data-EDSTATS_Country.csv"
?match
GDP<-read.csv(fileloc1)
STATS<-read.csv(fileloc2)
head(GDP,5)
GDP<-GDP[6:,1]
GDP<-GDP[6:195,1]
GDP[2,]
GDP[2]
STATS[:1]
STATS[,1]
STATS<-STATS[,1]
head(STATS,4)
match(GDP,STATS)
count(match(GDP,STATS))
？count
?count
?match
count(match(GDP,STATS,nomatch=0))
match(GDP,STATS,nomatch=0)
nrows(match(GDP,STATS,nomatch=0))
nrow(match(GDP,STATS,nomatch=0))
count(c(2,3,4))
matchresult<-match(GDP,STATS)
length(matchresult)
sort(GDP,desc)
?sort
sort(GDP,decreasing=TRUE)
STATS<-read.csv(fileloc2)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes,4)
tbl_df(sampleTimes)
dataloaded<-tbl_df(data.frame(sampleTimes))
dataloaded
seperate(dataloaded,sampleTimes,c(year,month,day))
separate(dataloaded,sampleTimes,c(year,month,day))
?separate
?separate
library(dplyr)
?separate
swirl()
library(tdlyr)
library(tdlyr)
view(sampleTimes)
View(sampleTimes)
?split
library(tdylr)
library(tdyr)
library(swirl)
swirl()
library(tidyr)
separate(dataloaded,sampleTimes,c(year,month,day))
separate(dataloaded,sampleTimes,c("year","month","day"))
dataloaded2<-separate(dataloaded,sampleTimes,c("year","month","day"))
dataloaded2
summarize(dataloaded2)
?which
dataloaded2 %>% which(year==2012)
select(dataloaded2,year=2012)
select(dataloaded2,year==2012)
filter(dataloaded2,year=2012)
?filter
filter(dataloaded2,year==2012)
nrow(dataloaded2)
nrow(filter(dataloaded2,year==2012))
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
fileloc<-"C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 4/getdata-data-ss06hid.csv"
downloaded<-read.csv(fileloc)
?strsplit
strsplit(downloaded)
strsplit(downloaded[1,])
downloaded2<-downloaded[1,]
strsplit(downloaded2)
strsplit(downloaded2,"wgtp")
head(downloaded2)
name(downloaded2)
names(downloaded2)
strsplit(names(downloaded2),"wgtp")
head(GDP)
read.csv("C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 4/getdata-data-GDP.csv")
downloaded<-read.csv("C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 4/getdata-data-GDP.csv")
head(downloaded)
?read.csv
downloaded<-read.csv("C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 4/getdata-data-GDP.csv",skip=5)
head(downloaded)
grep("^United",United.States)
grep("*United",United.States)
grep("*United",downloaded$United.States)
grep("^United",downloaded$United.States)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
setwd("C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 05 Reproducible Research/Peer assignment 1/RepData_PeerAssessment1")
