#
# A few thing to be careful of:
#
# 1. Separate arguments by commas
# 2. Make sure you have a closing parenthesis
# 3. Check your spelling!
# 4. Store the result in pack_sum (for 'package summary')
#
# You should also take a look at ?n and ?n_distinct, so
# that you really understand what is going on.
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
sumbit()
submit()
pack_sum
quantile(packa_sum$count,probs=0.99)
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum,count>679)
top_count
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted<-arrange(top_counts,count)
top_counts_sorted<-arrange(top_counts,desc(count)
)
view()
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum,count>465)
top_unique<-filter(pack_sum,unique>465)
View(top_counts)
View(top_unique)
arrange(top_unique,desc(unique)
）
arrange(top_unique,desc(unique))
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
student2
students2
gather(male_1,female_1)
gather(students,sex,count,-grade)
gather(student2,sex_class,count,-grade)
gather(students2,sex_class,count,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?seperate
?separate
separate(res,sex_class,sex,class)
separate(res,sex_class,c("sex","class"))
submit()
submit()
submit()
students3
resume()
swirl()
library("swirl")
swirl()
submit()
students3
?gather
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
?mutate
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed,final=passed)
?mutate
mutate(passed,final1=passed)
mutate(passed,final1="passed")
passed<-passed %>% mutate(status="passed")
failed<-failed %>% mutate(status="failed")
bind_rows(passed,failed)
sat
?seperate
?separate
submit()
submit()
submit()
submit()
submit()
View(sat)
View(sat)
?gather
submit()
?select
?gather
submit()
submit()
submit()
submit()
?which
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
gather(students,sex_class)
gather(students,sex_class,count,-grade)
res<-gather(students,sex_class,count,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
students3
submit()
?spread
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
reset()
reset()
q
q()
0
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
?download.file
destfileloc<-"C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 3"
destfileloc<-"C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 3/downloaded.csv"
download.file(url,destfileloc)
read.csv(destfileloc)
downloadedfile<-read.csv(destfileloc)
head(downloadedfile)
library(dplyr)
swril()
library(swril)
library("swril")
library("swirl")
swirl()
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
0
q
quit
quit()
downloadedfile<-read.csv("C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 3/downloaded.csv")
library(dplyr)
dlf2<-tbl_df(downloadedfile)
dlf2
?which
downloadedfile[,11:12]
agricultureLogical<-downloadedfile[,11:12]
head(which(agricultureLogical[,1]==3,agricultureLogical[,2]==6),3)
which(agricultureLogical[,1]==3,agricultureLogical[,2]==6)
head(agricultureLogical,3)
head(agricultureLogical,45)
which(agricultureLogical[,1]==3&agricultureLogical[,2]==6)
library(jpeg)
library("jpeg")
install.package("jpeg")
install.packages("jpeg")
library("jpeg")
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
destfileloc<-"C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 3/picture.jpg"
download.file(url,destfileloc)
pictureloaded<-read.jpeg(destfileloc)
pictureloaded<-read.jpg(destfileloc)
pictureloaded<-readJPEG(destfileloc)
destfileloc<-"C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 3/getdata-jeff.jpg"
pictureloaded<-readJPEG(destfileloc)
pictureloaded
pictureloaded[30]
head(pictureloaded,81)
quantile(pictureloaded,30)
?quantile
quantile(pictureloaded,prbs=c(30,80))
quantile(pictureloaded,probs=c(30,80))
quantile(pictureloaded,prbs=c(30,80))
fileloc1<-"C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 3/getdata-data-GDP.csv"
fileloc2<-"C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 3/getdata-data-EDSTATS_Country.csv"
?match
GDP<-read.csv(fileloc1)
STATS<-read.csv(fileloc2)
head(GDP,5)
GDP<-GDP[6:,1]
GDP<-GDP[6:195,1]
GDP[2,]
GDP[2]
STATS[:1]
STATS[,1]
STATS<-STATS[,1]
head(STATS,4)
match(GDP,STATS)
count(match(GDP,STATS))
？count
?count
?match
count(match(GDP,STATS,nomatch=0))
match(GDP,STATS,nomatch=0)
nrows(match(GDP,STATS,nomatch=0))
nrow(match(GDP,STATS,nomatch=0))
count(c(2,3,4))
matchresult<-match(GDP,STATS)
length(matchresult)
sort(GDP,desc)
?sort
sort(GDP,decreasing=TRUE)
STATS<-read.csv(fileloc2)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes,4)
tbl_df(sampleTimes)
dataloaded<-tbl_df(data.frame(sampleTimes))
dataloaded
seperate(dataloaded,sampleTimes,c(year,month,day))
separate(dataloaded,sampleTimes,c(year,month,day))
?separate
?separate
library(dplyr)
?separate
swirl()
library(tdlyr)
library(tdlyr)
view(sampleTimes)
View(sampleTimes)
?split
library(tdylr)
library(tdyr)
library(swirl)
swirl()
library(tidyr)
separate(dataloaded,sampleTimes,c(year,month,day))
separate(dataloaded,sampleTimes,c("year","month","day"))
dataloaded2<-separate(dataloaded,sampleTimes,c("year","month","day"))
dataloaded2
summarize(dataloaded2)
?which
dataloaded2 %>% which(year==2012)
select(dataloaded2,year=2012)
select(dataloaded2,year==2012)
filter(dataloaded2,year=2012)
?filter
filter(dataloaded2,year==2012)
nrow(dataloaded2)
nrow(filter(dataloaded2,year==2012))
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
fileloc<-"C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 4/getdata-data-ss06hid.csv"
downloaded<-read.csv(fileloc)
?strsplit
strsplit(downloaded)
strsplit(downloaded[1,])
downloaded2<-downloaded[1,]
strsplit(downloaded2)
strsplit(downloaded2,"wgtp")
head(downloaded2)
name(downloaded2)
names(downloaded2)
strsplit(names(downloaded2),"wgtp")
head(GDP)
read.csv("C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 4/getdata-data-GDP.csv")
downloaded<-read.csv("C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 4/getdata-data-GDP.csv")
head(downloaded)
?read.csv
downloaded<-read.csv("C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 03 Getting and Cleaning Data/Week 4/getdata-data-GDP.csv",skip=5)
head(downloaded)
grep("^United",United.States)
grep("*United",United.States)
grep("*United",downloaded$United.States)
grep("^United",downloaded$United.States)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
install.packages(ggplot2)
install.packages("ggplot2")
setwd("C:/Users/steven-j.yu/Downloads/Steven's/Studying/Data Science - 05 Reproducible Research/Peer assignment 1/RepData_PeerAssessment1")
#################################################################################################################################
## Loading and preprocessing the data ###########################################################################################
#1.Load the data
setwd("C:/Users/steven-j.yu/Downloads/Steven's/学习资料/Data Science - 05 Reproducible Research/Peer assignment 1")
activity_monitoring_data <- read.csv("activity.csv",na.strings="NA")
#2.Process/transform the data (if necessary) into a format suitable for analysis
activity_monitoring_data$date <- as.Date(activity_monitoring_data$date,"%Y-%m-%d")
activity_monitoring_data_nas <- subset(activity_monitoring_data,is.na(activity_monitoring_data$steps))
activity_monitoring_data_no_nas <- activity_monitoring_data[apply(activity_monitoring_data, 1, function(x)!any(is.na(x))), , drop=F]
#################################################################################################################################
## What is mean total number of steps taken per day? ############################################################################
#1.Calculate the total number of steps taken per day
library("sqldf")
activity_monitoring_data_sum_by_day <-sqldf("select sum(steps) as Steps_by_day,date from activity_monitoring_data group by date")
activity_monitoring_data_mean_by_day <-sqldf("select avg(steps) as Steps_by_day,date from activity_monitoring_data_no_nas group by date")
#2.Make a histogram of the total number of steps taken each day
hist(as.numeric(activity_monitoring_data_sum_by_day$Steps_by_day))
#3.Calculate and report the mean and median of the total number of steps taken per day
mean_of_total_no_of_steps_per_day <-mean(as.numeric(activity_monitoring_data_sum_by_day$Steps_by_day),na.rm=TRUE)
median_of_total_no_of_steps_per_day <-median(as.numeric(activity_monitoring_data_sum_by_day$Steps_by_day),na.rm=TRUE)
#################################################
## What is the average daily activity pattern? ##
#1.Make a time series plot(i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged
#across all days (y-axis)
activity_monitoring_data_sum_by_interval <-sqldf("select avg(steps) as Avg_steps_by_day,interval from activity_monitoring_data group by interval order by Avg_steps_by_day DESC")
plot(activity_monitoring_data_sum_by_interval$Avg_steps_by_day,type="l")
#2.Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
interval_contains_max_no_of_steps <- activity_monitoring_data_sum_by_interval[1,2]
#################################################################################################################################
## Imputing missing values ######################################################################################################
#1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs) #############
count_of_nas <- nrow(activity_monitoring_data_nas)
count_of_nas
#2.Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
#2.1 Replace na with zero
activity_monitoring_data_nas <- subset(activity_monitoring_data,is.na(activity_monitoring_data$steps))
activity_monitoring_data_nas[is.na(activity_monitoring_data_nas)] <- 0
activity_monitoring_data_replace_with_zero <- rbind(activity_monitoring_data_nas, activity_monitoring_data_no_nas)
activity_monitoring_data_replace_with_zero_sum_by_day <-sqldf("select sum(steps) as Steps_by_day,date from activity_monitoring_data_replace_with_zero group by date")
hist(as.numeric(activity_monitoring_data_replace_with_zero_sum_by_day$Steps_by_day))
#2.2 Replace na with mean by interval
activity_monitoring_data_nas <- subset(activity_monitoring_data,is.na(activity_monitoring_data$steps))
activity_monitoring_data_mean_by_interval <-sqldf("select avg(steps) as steps,interval from activity_monitoring_data group by interval")
activity_monitoring_data_nas_combined_with_mean_by_interval <- sqldf("select * from activity_monitoring_data_nas d left join activity_monitoring_data_mean_by_interval m on d.interval=m.interval")
activity_monitoring_data_replace_with_interval_mean <- rbind(activity_monitoring_data_nas_combined_with_mean_by_interval[,c(4,2,3)], activity_monitoring_data_no_nas)
activity_monitoring_data_replace_with_interval_mean_sum_by_day <-sqldf("select sum(steps) as Steps_by_day,date from activity_monitoring_data_replace_with_interval_mean group by date")
hist(as.numeric(activity_monitoring_data_replace_with_interval_mean_sum_by_day$Steps_by_day))
#2.3 Replace na with median by interval
activity_monitoring_data_nas <- subset(activity_monitoring_data,is.na(activity_monitoring_data$steps))
activity_monitoring_data_median_by_interval <-sqldf("select median(steps) as steps,interval from activity_monitoring_data group by interval")
activity_monitoring_data_nas_combined_with_median_by_interval <- sqldf("select * from activity_monitoring_data_nas d left join activity_monitoring_data_mean_by_interval m on d.interval=m.interval")
activity_monitoring_data_replace_with_interval_median <- rbind(activity_monitoring_data_nas_combined_with_median_by_interval[,c(4,2,3)], activity_monitoring_data_no_nas)
activity_monitoring_data_replace_with_interval_median_sum_by_day <-sqldf("select sum(steps) as Steps_by_day,date from activity_monitoring_data_replace_with_interval_median group by date")
hist(as.numeric(activity_monitoring_data_replace_with_interval_median_sum_by_day$Steps_by_day))
?weekdays
activity_monitoring_data_replace_with_zero_test <- activity_monitoring_data_replace_with_zero
activity_monitoring_data_replace_with_zero_test$weekdays_indicator <- apply (activity_monitoring_data_replace_with_zero_test, 2, weekdays)
activity_monitoring_data_replace_with_zero_test$weekdays_indicator <- apply (activity_monitoring_data_replace_with_zero_test$date, 2, weekdays)
?weekdays
activity_monitoring_data_replace_with_zero_test$weekdays_indicator <- lapply (activity_monitoring_data_replace_with_zero_test$date, weekdays)
head(activity_monitoring_data_replace_with_zero_test)
?weekdays
?if
)
?ifs
?sub
activity_monitoring_data_replace_with_zero_test$weekdays_indicator <- sub("星期一|星期二|星期三","weekdays")
activity_monitoring_data_replace_with_zero_test$weekdays_indicator <- sub("星期一|星期二|星期三","weekdays",activity_monitoring_data_replace_with_zero_test$weekdays_indicator)
head(activity_monitoring_data_replace_with_zero_test)
activity_monitoring_data_replace_with_zero_test[2000:2010,]
str(activity_monitoring_data_replace_with_zero_test)
activity_monitoring_data_replace_with_zero_test$weekdays_indicator <- sub("星期一","weeeeeeekdays",activity_monitoring_data_replace_with_zero_test$weekdays_indicator)
head(activity_monitoring_data_replace_with_zero_test)
activity_monitoring_data_replace_with_zero_test <- activity_monitoring_data_replace_with_zero
activity_monitoring_data_replace_with_zero_test$weekdays_indicator <- sub("星期一","weeeeeeekdays",activity_monitoring_data_replace_with_zero_test$weekdays_indicator)
activity_monitoring_data_replace_with_zero_test <- activity_monitoring_data_replace_with_zero
activity_monitoring_data_replace_with_zero_test$weekdays_indicator <- lapply (activity_monitoring_data_replace_with_zero_test$date, weekdays)
activity_monitoring_data_replace_with_zero_test$weekdays_indicator <- sub("星期一","weeeeeeekdays",activity_monitoring_data_replace_with_zero_test$weekdays_indicator)
head(activity_monitoring_data_replace_with_zero_test)
activity_monitoring_data_replace_with_zero_test[2000:2010,]
activity_monitoring_data_replace_with_zero_test <- activity_monitoring_data_replace_with_zero
activity_monitoring_data_replace_with_zero_test$weekdays_indicator <- lapply (activity_monitoring_data_replace_with_zero_test$date, weekdays)
activity_monitoring_data_replace_with_zero_test$weekdays_indicator <- sub("星期一|星期二|星期三|星期四|星期五","weekday",activity_monitoring_data_replace_with_zero_test$weekdays_indicator)
activity_monitoring_data_replace_with_zero_test$weekdays_indicator <- sub("星期六|星期日","weekend",activity_monitoring_data_replace_with_zero_test$weekdays_indicator)
library(ggplot2)
?qplot
ID=1:26
Value=letters
data=data.frame(cbind(ID,Value))
data
look=c(1,9,8,7,12,25)
#不要告诉我用data[look],这只适用于ID与样本号相同的情况！
data[match(look,data[,1]),2]
look=c("2012-10-01","2012-11-12")
head(activity_monitoring_data_replace_with_zero_test[match(look,activity_monitoring_data_replace_with_zero_test[,2]),2:4])
look=c(5,10)
head(activity_monitoring_data_replace_with_zero_test[match(look,activity_monitoring_data_replace_with_zero_test[,3]),3:4])
library(ggplot2)
plot_for_zero_replaced_ds <- ggplot(data = activity_monitoring_data_replace_with_zero_wkd, mapping = aes(x = carat, y = price),type="l")
activity_monitoring_data_replace_with_zero_wkd <- activity_monitoring_data_replace_with_zero
activity_monitoring_data_replace_with_zero_wkd$weekdays_indicator <- lapply (activity_monitoring_data_replace_with_zero_wkd$date, weekdays)
activity_monitoring_data_replace_with_zero_wkd$weekdays_indicator <- sub("星期一|星期二|星期三|星期四|星期五","weekday",activity_monitoring_data_replace_with_zero_wkd$weekdays_indicator)
activity_monitoring_data_replace_with_zero_wkd$weekdays_indicator <- sub("星期六|星期日","weekend",activity_monitoring_data_replace_with_zero_wkd$weekdays_indicator)
library(ggplot2)
plot_for_zero_replaced_ds <- ggplot(data = activity_monitoring_data_replace_with_zero_wkd, mapping = aes(x = carat, y = price),type="l")
plot_for_zero_replaced_ds
plot_for_zero_replaced_ds+geom_line()
activity_monitoring_data_replace_with_zero_wkd_sum_by_interval <- sqldf("select sum(steps) as Steps_by_day,interval from activity_monitoring_data_replace_with_zero_wkd where weekdays_indicator = 'weekday' group by interval")
activity_monitoring_data_replace_with_zero_wked_sum_by_interval <- sqldf("select sum(steps) as Steps_by_day,interval from activity_monitoring_data_replace_with_zero_wkd where weekdays_indicator = 'weekend' group by interval")
#2.Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
library(ggplot2)
plot_for_zero_replaced_ds <- ggplot(data = activity_monitoring_data_replace_with_zero_wkd_sum_by_interval, mapping = aes(x = interval, y = Steps_by_day),type="l")
plot_for_zero_replaced_ds+geom_line()
activity_monitoring_data_replace_with_zero_wkd_avg_by_interval <- sqldf("select avg(steps) as Steps_by_day,interval from activity_monitoring_data_replace_with_zero_wkd where weekdays_indicator = 'weekday' group by interval")
activity_monitoring_data_replace_with_zero_wked_avg_by_interval <- sqldf("select avg(steps) as Steps_by_day,interval from activity_monitoring_data_replace_with_zero_wkd where weekdays_indicator = 'weekend' group by interval")
#2.Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
library(ggplot2)
plot_for_zero_replaced_wkd <- ggplot(data = activity_monitoring_data_replace_with_zero_wkd_avg_by_interval, mapping = aes(x = interval, y = Steps_by_day),type="l")
plot_for_zero_replaced_wkd+geom_line()
par(2,1)
plot_for_zero_replaced_wkd <- ggplot(data = activity_monitoring_data_replace_with_zero_wkd_avg_by_interval, mapping = aes(x = interval, y = Steps_by_day),type="l")
plot_for_zero_replaced_wkd+geom_line()
plot_for_zero_replaced_wked <- ggplot(data = activity_monitoring_data_replace_with_zero_wked_avg_by_interval, mapping = aes(x = interval, y = Steps_by_day),type="l")
plot_for_zero_replaced_wked+geom_line()
par(mfrow=c(2,1))
plot_for_zero_replaced_wkd <- ggplot(data = activity_monitoring_data_replace_with_zero_wkd_avg_by_interval, mapping = aes(x = interval, y = Steps_by_day),type="l")
plot_for_zero_replaced_wkd+geom_line()
plot_for_zero_replaced_wked <- ggplot(data = activity_monitoring_data_replace_with_zero_wked_avg_by_interval, mapping = aes(x = interval, y = Steps_by_day),type="l")
plot_for_zero_replaced_wked+geom_line()
par(mfrow=c(2,1))
plot_for_zero_replaced_wkd <- ggplot(data = activity_monitoring_data_replace_with_zero_wkd_avg_by_interval, mapping = aes(x = interval, y = Steps_by_day),type="l")
plot_for_zero_replaced_wkd+geom_line()
require(ggthemes)
par(mfrow=c(2,1))
plot_for_zero_replaced_wkd <- ggplot(data = activity_monitoring_data_replace_with_zero_wkd_avg_by_interval, mapping = aes(x = interval, y = Steps_by_day),type="l")
plot_for_zero_replaced_wkd+geom_line()+theme_wsj()
plot_for_zero_replaced_wked <- ggplot(data = activity_monitoring_data_replace_with_zero_wked_avg_by_interval, mapping = aes(x = interval, y = Steps_by_day),type="l")
plot_for_zero_replaced_wked+geom_line()+theme_wsj()
activity_monitoring_data_replace_with_zero_wkd+wked <- rbind (activity_monitoring_data_replace_with_zero_wkd_avg_by_interval,activity_monitoring_data_replace_with_zero_wked_avg_by_interval)
activity_monitoring_data_replace_with_zero_wkd_wked <- rbind (activity_monitoring_data_replace_with_zero_wkd_avg_by_interval,activity_monitoring_data_replace_with_zero_wked_avg_by_interval)
head(activity_monitoring_data_replace_with_zero_wkd_wked)
library(lattice)
xyplot(Steps_by_day~interval|factor(weekdays_indicator),type="l",col.line=3,data=activity_monitoring_data_replace_with_zero_wkd_wked)
xyplot(Steps_by_day~interval|weekdays_indicator,type="l",col.line=3,data=activity_monitoring_data_replace_with_zero_wkd_wked)
activity_monitoring_data_replace_with_zero_wkd_wked$weekdays_indicator <- as.factor(activity_monitoring_data_replace_with_zero_wkd_wked$weekdays_indicator)
?as.factor
activity_monitoring_data_replace_with_zero_wkd_wked$weekdays_indicator <- as.factor(as.character(activity_monitoring_data_replace_with_zero_wkd_wked$weekdays_indicator))
as.factor(as.character(activity_monitoring_data_replace_with_zero_wkd_wked$weekdays_indicator))
head(activity_monitoring_data_replace_with_zero_wkd_wked)
activity_monitoring_data_replace_with_zero_wkd_avg_by_interval <- sqldf("select avg(steps) as Steps_by_day,interval,weekdays_indicator from activity_monitoring_data_replace_with_zero_wkd where weekdays_indicator = 'weekday' group by interval")
activity_monitoring_data_replace_with_zero_wked_avg_by_interval <- sqldf("select avg(steps) as Steps_by_day,interval,weekdays_indicator from activity_monitoring_data_replace_with_zero_wkd where weekdays_indicator = 'weekend' group by interval")
activity_monitoring_data_replace_with_zero_wkd_wked <- rbind (activity_monitoring_data_replace_with_zero_wkd_avg_by_interval,activity_monitoring_data_replace_with_zero_wked_avg_by_interval)
#2.Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
library(ggplot2)
library(ggthemes)
par(mfrow=c(2,1))
plot_for_zero_replaced_wkd <- ggplot(data = activity_monitoring_data_replace_with_zero_wkd_avg_by_interval, mapping = aes(x = interval, y = Steps_by_day),type="l")
plot_for_zero_replaced_wkd+geom_line()+theme_wsj()
plot_for_zero_replaced_wked <- ggplot(data = activity_monitoring_data_replace_with_zero_wked_avg_by_interval, mapping = aes(x = interval, y = Steps_by_day),type="l")
plot_for_zero_replaced_wked+geom_line()+theme_wsj()
library(lattice)
xyplot(Steps_by_day~interval|weekdays_indicator,type="l",col.line=3,data=activity_monitoring_data_replace_with_zero_wkd_wked)
par(mfrow=c(1,2))
xyplot(Steps_by_day~interval|weekdays_indicator,type="l",col.line=3,data=activity_monitoring_data_replace_with_zero_wkd_wked)
xyplot(Steps_by_day~interval|weekdays_indicator,type="l",layout=c(1,2),col.line=3,data=activity_monitoring_data_replace_with_zero_wkd_wked)
?knit2html
knit2html("Peer assignment 1.rmd")"
knit2html("Peer assignment 1.rmd")
library("knitr")
knit2html("Peer assignment 1.rmd")
setwd("C:/Users/steven-j.yu/Downloads")
knit2html("Peer assignment 1.rmd")
setwd("C:/Users/steven-j.yu/Downloads/Steven's/studying/Data Science - 05 Reproducible Research/Peer assignment 1")
knit2html("PA1_template.rmd")
setwd("C:/Users/steven-j.yu/Downloads/Steven's/Studying/Data Science - 05 Reproducible Research/Peer assignment 1/RepData_PeerAssessment1")
knit2html("PA1_template.rmd")
#1.Make a time series plot(i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged
#across all days (y-axis)
activity_monitoring_data_avg_by_interval <-sqldf("select avg(steps) as Avg_steps_by_day,interval from activity_monitoring_data group by interval order by Avg_steps_by_day DESC")
plot(activity_monitoring_data_avg_by_interval$Avg_steps_by_day,type="l")
hist(as.numeric(activity_monitoring_data_avg_by_interval$Avg_steps_by_day), xlab = "Steps by day", main = "Histogram of total number of steps taken each day")
head(activity_monitoring_data_avg_by_interval)
str(activity_monitoring_data_avg_by_interval)
?plot
plot(activity_monitoring_data_avg_by_interval$interval,activity_monitoring_data_avg_by_interval$Avg_steps_by_day,type="l")
plot(activity_monitoring_data_avg_by_interval$Avg_steps_by_day,activity_monitoring_data_avg_by_interval$interval,type="l")
activity_monitoring_data_avg_by_interval <-sqldf("select avg(steps) as Avg_steps_by_day,interval from activity_monitoring_data group by interval")
head(activity_monitoring_data_avg_by_interval)
hist(as.numeric(activity_monitoring_data_avg_by_interval$Avg_steps_by_day), xlab = "Steps by day", main = "Histogram of total number of steps taken each day")
plot(activity_monitoring_data_avg_by_interval$Avg_steps_by_day,activity_monitoring_data_avg_by_interval$interval,type="l")
number of steps taken each day")
plot(activity_monitoring_data_avg_by_interval$interval,activity_monitoring_data_avg_by_interval$Avg_steps_by_day,type="l")
number of steps taken each day")
plot(activity_monitoring_data_avg_by_interval$interval,activity_monitoring_data_avg_by_interval$Avg_steps_by_day,type="l")
plot(activity_monitoring_data_avg_by_interval$interval,activity_monitoring_data_avg_by_interval$Avg_steps_by_day,type="l")
knit2html("PA1_template.Rmd")
